// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimetableManager.EntityFramework;

namespace TimetableManager.WPF.Migrations
{
    [DbContext(typeof(TimetableManagerDbContext))]
    [Migration("20201002115542_sprint2-release")]
    partial class sprint2release
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("TimetableManager.Domain.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuildingName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CenterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BuildingId");

                    b.HasIndex("CenterId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Center", b =>
                {
                    b.Property<int>("CenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CenterName")
                        .HasColumnType("TEXT");

                    b.HasKey("CenterId");

                    b.ToTable("Centers");

                    b.HasData(
                        new
                        {
                            CenterId = 1,
                            CenterName = "Malabe"
                        },
                        new
                        {
                            CenterId = 2,
                            CenterName = "Matara"
                        },
                        new
                        {
                            CenterId = 3,
                            CenterName = "Kandy"
                        });
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Day", b =>
                {
                    b.Property<int>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("endHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("endMin")
                        .HasColumnType("TEXT");

                    b.Property<string>("startHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("startMin")
                        .HasColumnType("TEXT");

                    b.HasKey("DayId");

                    b.HasAlternateKey("DayName");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            DayId = 1,
                            DayName = "Monday",
                            IsSelected = false
                        },
                        new
                        {
                            DayId = 2,
                            DayName = "Tuesday",
                            IsSelected = false
                        },
                        new
                        {
                            DayId = 3,
                            DayName = "Wednesday",
                            IsSelected = false
                        },
                        new
                        {
                            DayId = 4,
                            DayName = "Thursday",
                            IsSelected = false
                        },
                        new
                        {
                            DayId = 5,
                            DayName = "Friday",
                            IsSelected = false
                        },
                        new
                        {
                            DayId = 6,
                            DayName = "Saturday",
                            IsSelected = false
                        },
                        new
                        {
                            DayId = 7,
                            DayName = "Sunday",
                            IsSelected = false
                        });
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.DaysAndHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mins")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoOfDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeSlot")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DaysAndHours");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FacultyName")
                        .HasColumnType("TEXT");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            FacultyId = 1,
                            FacultyName = "Computing"
                        },
                        new
                        {
                            FacultyId = 2,
                            FacultyName = "Engineering"
                        },
                        new
                        {
                            FacultyId = 3,
                            FacultyName = "Business"
                        });
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GroupIds");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupIdPreferredRoom", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("GroupIdPreferredRoom");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupIdSession", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("GroupIdSession");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupIdUnavailableTimeSlot", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeSlotId")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId", "TimeSlotId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("GroupIdUnavailableTimeSlot");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupNum")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GroupNumbers");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupTimetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("groupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("lecturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("room")
                        .HasColumnType("TEXT");

                    b.Property<string>("subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("timeSlot")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GroupTTs");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CenterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rank")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasAlternateKey("EmployeeId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CenterId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("LevelId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.LecturerPreferredRoom", b =>
                {
                    b.Property<int>("LectuererId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LectuererId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("LecturerPreferredRoom");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.LecturerSession", b =>
                {
                    b.Property<int>("LecturerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LecturerId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("LecturerSession");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.LecturerTimetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeSlot")
                        .HasColumnType("TEXT");

                    b.Property<string>("groupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("lecturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("room")
                        .HasColumnType("TEXT");

                    b.Property<string>("subjectName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LecturerTTs");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.LecturerUnavailableTimeSlot", b =>
                {
                    b.Property<int>("LecturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeSlotId")
                        .HasColumnType("TEXT");

                    b.HasKey("LecturerId", "TimeSlotId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("LecturerUnavailableTimeSlot");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LevelName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("LevelId");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LevelId = 1,
                            LevelName = "Professor"
                        },
                        new
                        {
                            Id = 2,
                            LevelId = 2,
                            LevelName = "Assistant Professor"
                        },
                        new
                        {
                            Id = 3,
                            LevelId = 3,
                            LevelName = "Senior Lecturer(HG)"
                        },
                        new
                        {
                            Id = 4,
                            LevelId = 4,
                            LevelName = "Senior Lecturer"
                        },
                        new
                        {
                            Id = 5,
                            LevelId = 5,
                            LevelName = "Lecturer"
                        },
                        new
                        {
                            Id = 6,
                            LevelId = 6,
                            LevelName = "Assistant Lecturer"
                        },
                        new
                        {
                            Id = 7,
                            LevelId = 7,
                            LevelName = "Instructors"
                        });
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Programme", b =>
                {
                    b.Property<int>("ProgrammeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgrammeFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgrammeShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("ProgrammeId");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CenterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomName")
                        .HasColumnType("TEXT");

                    b.HasKey("RoomId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CenterId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.RoomTimetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("groupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("lecturer")
                        .HasColumnType("TEXT");

                    b.Property<string>("roomName")
                        .HasColumnType("TEXT");

                    b.Property<string>("subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("timeSlot")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RoomTTs");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsecutiveSessionSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SessionId");

                    b.HasIndex("ConsecutiveSessionSessionId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TagId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SessionPreferredRoom", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SessionId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("SessionPreferredRoom");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SessionUnavailableTimeSlot", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeSlotId")
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId", "TimeSlotId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("SessionUnavailableTimeSlot");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubGroupId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubGroupID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SubGroupIds");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubGroupIdPrefferedRoom", b =>
                {
                    b.Property<int>("SubGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubGroupId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("SubGroupIdPrefferedRoom");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubGroupIdSession", b =>
                {
                    b.Property<int>("SubGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubGroupId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("SubGroupIdSession");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubGroupIdUnavailableTimeSlot", b =>
                {
                    b.Property<int>("SubGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeSlotId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubGroupId", "TimeSlotId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("SubGroupIdUnavailableTimeSlot");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubGroupNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubGroupNum")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SubGroupNumbers");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EvaluationHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LectureHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfferedYearSemester")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TutorialHours")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubjectPreferredRoom", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubjectId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("SubjectPreferredRoom");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagName")
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.TagPreferredRoom", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("TagPreferredRoom");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.TimeSlot", b =>
                {
                    b.Property<string>("CodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("endTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("sessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("startTime")
                        .HasColumnType("TEXT");

                    b.HasKey("CodeId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Year_Semester", b =>
                {
                    b.Property<int>("YsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("YsSemester")
                        .HasColumnType("TEXT");

                    b.Property<string>("YsShortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("YsYear")
                        .HasColumnType("TEXT");

                    b.HasKey("YsId");

                    b.ToTable("Year_Semesters");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Building", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Center", "Center")
                        .WithMany("Buildings")
                        .HasForeignKey("CenterId");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Department", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupIdPreferredRoom", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.GroupId", "Group")
                        .WithMany("GroupIdPreferredRooms")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.Room", "Room")
                        .WithMany("GroupIdPreferredRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupIdSession", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.GroupId", "Group")
                        .WithMany("GroupIdSessions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.Session", "Session")
                        .WithMany("GroupIdSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.GroupIdUnavailableTimeSlot", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.GroupId", "Group")
                        .WithMany("GroupIdUnavailableTimeSlots")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.TimeSlot", "TimeSlot")
                        .WithMany("GroupIdUnavailableTimeSlots")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Lecturer", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Building", "Building")
                        .WithMany("Lecturers")
                        .HasForeignKey("BuildingId");

                    b.HasOne("TimetableManager.Domain.Models.Center", "Center")
                        .WithMany("Lecturers")
                        .HasForeignKey("CenterId");

                    b.HasOne("TimetableManager.Domain.Models.Department", "Department")
                        .WithMany("Lecturers")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("TimetableManager.Domain.Models.Faculty", "Faculty")
                        .WithMany("Lecturers")
                        .HasForeignKey("FacultyId");

                    b.HasOne("TimetableManager.Domain.Models.Level", "Level")
                        .WithMany("Lecturers")
                        .HasForeignKey("LevelId");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.LecturerPreferredRoom", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Lecturer", "Lectuer")
                        .WithMany("LecturerPreferredRooms")
                        .HasForeignKey("LectuererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.Room", "Room")
                        .WithMany("LecturerPreferredRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.LecturerSession", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Lecturer", "Lecturer")
                        .WithMany("LecturerSessions")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.Session", "Session")
                        .WithMany("LecturerSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.LecturerUnavailableTimeSlot", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Lecturer", "Lecturer")
                        .WithMany("LecturerUnavailableTimeSlots")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.TimeSlot", "TimeSlot")
                        .WithMany("LecturerUnavailableTimeSlots")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Room", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId");

                    b.HasOne("TimetableManager.Domain.Models.Center", "Center")
                        .WithMany("Rooms")
                        .HasForeignKey("CenterId");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.Session", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Session", "ConsecutiveSession")
                        .WithMany()
                        .HasForeignKey("ConsecutiveSessionSessionId");

                    b.HasOne("TimetableManager.Domain.Models.Subject", "Subject")
                        .WithMany("Sessions")
                        .HasForeignKey("SubjectId");

                    b.HasOne("TimetableManager.Domain.Models.Tag", "Tag")
                        .WithMany("Sessions")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SessionPreferredRoom", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Room", "Room")
                        .WithMany("SessionPreferredRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.Session", "Session")
                        .WithMany("SessionPreferredRooms")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SessionUnavailableTimeSlot", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Session", "Session")
                        .WithMany("SessionUnavailableTimeSlots")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.TimeSlot", "TimeSlot")
                        .WithMany("SessionUnavailableTimeSlots")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubGroupIdPrefferedRoom", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Room", "Room")
                        .WithMany("SubGroupIdPrefferedRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.SubGroupId", "SubGroup")
                        .WithMany("SubGroupIdPrefferedRooms")
                        .HasForeignKey("SubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubGroupIdSession", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Session", "Session")
                        .WithMany("SubGroupIdSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.SubGroupId", "SubGroup")
                        .WithMany("SubGroupIdSessions")
                        .HasForeignKey("SubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubGroupIdUnavailableTimeSlot", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.SubGroupId", "SubGroup")
                        .WithMany("SubGroupIdUnavailableTimeSlots")
                        .HasForeignKey("SubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.TimeSlot", "TimeSlot")
                        .WithMany("SubGroupIdUnavailableTimeSlots")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.SubjectPreferredRoom", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Room", "Room")
                        .WithMany("SubjectPreferredRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.Subject", "Subject")
                        .WithMany("SubjectPreferredRooms")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimetableManager.Domain.Models.TagPreferredRoom", b =>
                {
                    b.HasOne("TimetableManager.Domain.Models.Room", "Room")
                        .WithMany("TagPreferredRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimetableManager.Domain.Models.Tag", "Tag")
                        .WithMany("TagPreferredRooms")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
