# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'sonarqube-server-linode-vps'
    scannerMode: 'MSBuild'
    projectKey: 'timetable-management-system-key'
    projectName: 'timetable-management-system'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: SonarQubeAnalyze@4

- task: SonarQubePublish@4
  inputs:
    pollingTimeoutSec: '300'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $token = [System.Text.Encoding]::UTF8.GetBytes($env:SONARTOKEN + ":")
      $base64 = [System.Convert]::ToBase64String($token)
       
      $basicAuth = [string]::Format("Basic {0}", $base64)
      $headers = @{ Authorization = $basicAuth }
       
      $result = Invoke-RestMethod -Method Get -Uri http://ec2-34-226-214-5.compute-1.amazonaws.com:9000/api/qualitygates/project_status?projectKey=timetable-management-system
      $result | ConvertTo-Json | Write-Host
       
      if ($result.projectStatus.status -eq "OK") {
      Write-Host "Quality Gate Succeeded"
      }else{
      throw "Quality gate failed"
      }
